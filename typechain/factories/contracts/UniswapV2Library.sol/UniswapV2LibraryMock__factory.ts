/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";

import type { PromiseOrValue } from "../../../common";
import type {
  UniswapV2LibraryMock,
  UniswapV2LibraryMockInterface,
} from "../../../contracts/UniswapV2Library.sol/UniswapV2LibraryMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256",
      },
    ],
    name: "getAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "pairFor",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    name: "quote",
    outputs: [
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "sortTokens",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506100437f07a94bba3a2295998415ecfd64f32aeff47d0082affc04039ac045cf65e688df60001b61004860201b60201c565b61004b565b50565b61239b8061005a6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636d91c0e21161005b5780636d91c0e21461039057806385f8c25914610454578063ad615dec146104aa578063bb7b9c761461050057610088565b8063054d50d41461008d578063192128b2146100e3578063327494611461021a578063544caa56146102b9575b600080fd5b6100cd600480360360608110156100a357600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610637565b6040518082815260200191505060405180910390f35b6101c3600480360360608110156100f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561014057600080fd5b82018360208201111561015257600080fd5b8035906020019184602083028401116401000000008311171561017457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610a54565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102065780820151818401526020810190506101eb565b505050509050019250505060405180910390f35b61029c6004803603606081101561023057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e68565b604051808381526020018281526020019250505060405180910390f35b61031b600480360360408110156102cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110c5565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b610412600480360360608110156103a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611420565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104946004803603606081101561046a57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611657565b6040518082815260200191505060405180910390f35b6104ea600480360360608110156104c057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611a29565b6040518082815260200191505060405180910390f35b6105e06004803603606081101561051657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561055d57600080fd5b82018360208201111561056f57600080fd5b8035906020019184602083028401116401000000008311171561059157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611cf2565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610623578082015181840152602081019050610608565b505050509050019250505060405180910390f35b60006106657f183b8daa67ddc2d72f9964ad397ee48cca3c12a007245ddeb1c074b02f977df060001b6120fe565b6106917f7a3c52f411ac0fc3677765fce19d40ad3ab4512d234510513a134281f8692a9560001b6120fe565b6106bd7f29c3332ed7dfc7a9a3e7dc22a89677efc38edfc8b6ff0f123df095c87fffdf1460001b6120fe565b6106e97f2c27651e1f435dda609f160bb864f3c83a2a26aec1c05b716608b93e0bd281f960001b6120fe565b60008411610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061233b602b913960400191505060405180910390fd5b61076e7f1471dba08cf10795da01f66343a6a27060b67b23bc91c10322ab575b81e35de060001b6120fe565b61079a7fe43d54ead76b81819e196d073f14b6705e36cc5d7ee593c69f0a55dfdc8db96d60001b6120fe565b6107c67fd898777e1c58c16a2ca5a655babe7c40cdd71a3b75b7b7357eea0aaf8612aef360001b6120fe565b6107f27fc237fdadbc4d84a2833d7131af7026ada0ef2a2057c827210f7b35323d699daa60001b6120fe565b6000831180156108025750600082115b610857576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806122ee6028913960400191505060405180910390fd5b6108837fbe2a5a54362fdb4e3084f9d9b9dd430fca2e17ff2e1a1679a6d0c63d4175a7ed60001b6120fe565b6108af7f7ac7d83c63fe75d8fbe936d116947cd6a6d0d07bc269591ac2c335ca4e206b4b60001b6120fe565b6108db7f7e6af87a278c35f2de35b05014988e7e841eaed1eaba102c35dc5e6ec046567f60001b6120fe565b60006108f26103e58661210190919063ffffffff16565b90506109207f1b82a13cc1e1fcbceb73feb84062c008da62d964c4fdd2d6e49713e22073cd4b60001b6120fe565b61094c7fa21bed431a52bc433951599058c5a1ee170aa1097783c1465939b19c337e226260001b6120fe565b6000610961848361210190919063ffffffff16565b905061098f7f587c2d0d2d70fa84a7f371630e2eef19b9be5242bacf29c45dd0bf89482e939160001b6120fe565b6109bb7f7f30504b2ca02cbe6684dea2b81c694d4d5688087193dc1c608912690d87795660001b6120fe565b60006109e4836109d66103e88961210190919063ffffffff16565b61219690919063ffffffff16565b9050610a127f4d9600ad9bc1b91523ecadcdf35870d0f2dffa8641820212d6068e4c78f88b2760001b6120fe565b610a3e7f7ce90b07dd9c7a984282bc3a1d8aa00a2835f485ab1842c0f37a6046411001bf60001b6120fe565b808281610a4757fe5b0493505050509392505050565b6060610a827f4e079d2b839fc4ba12ce6788eb596cccc6ac1592b0a05a31ddf9e67e8eb9cf1160001b6120fe565b610aae7f1a4f7187ff4c98d59e4f899d66c0136a182e25cd85693dfe3db6732533401b5860001b6120fe565b610ada7f220c8f05d2bb9cce1fb89908421ca1a7cff7fe31ef373a7ff0492264fb06e7b960001b6120fe565b610b067f2de90b3eaaaaf47109802f90b08ee4244147643ef3598b44cb91b4a35f6d4c6a60001b6120fe565b600282511015610b7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556e697377617056324c6962726172793a20494e56414c49445f50415448000081525060200191505060405180910390fd5b610baa7fb82eca0b57976d4d16e12534272edfad8fe13f95feefadca4898b97ab0d1336a60001b6120fe565b610bd67f1112fe76f8f174cfeff0095a517f8d65a99643ce95b5af87be3071eca3596bfb60001b6120fe565b610c027fe164209efc02165c4047adbfd3bec019adc45405c1b1673ab19dcd52fcbaf63360001b6120fe565b815167ffffffffffffffff81118015610c1a57600080fd5b50604051908082528060200260200182016040528015610c495781602001602082028036833780820191505090505b509050610c787f958cdb51a705a9ea792178f5ee02e290c17a5ef8a2a9b8c4ce07939b82bc0a2360001b6120fe565b610ca47fc757d388bb2936be25c9e1e6969359b40599c5b6e744980c96e43aae8f22b51f60001b6120fe565b8281600183510381518110610cb557fe5b602002602001018181525050610ced7f885497beb60f8d481c6302147b565520d3d475a545a9fa5a304bc74e9266cbf960001b6120fe565b610d197fa7b68070ae72e2d9bfdc15ae18b46cb8371e3d1747fada95d68f410ac029bdad60001b6120fe565b6000600183510390505b6000811115610e6057610d587f1482385022b097725ef5e5e5b11362f26d99000ee75bc4fbe3d7e4df403e5f9d60001b6120fe565b610d847fe95f23c99368e851ebec2589098e239bd28eba72da0b18057ad7cff7b1c545b460001b6120fe565b600080610dbb87866001860381518110610d9a57fe5b6020026020010151878681518110610dae57fe5b6020026020010151610e68565b91509150610deb7fe74e27f813297a82438e8e79fc45305d1c93c616ed796b38a07faf5aa68d36e960001b6120fe565b610e177faf130bbfa0407207df4d72e20cf3e0b14def00b88ed28b26a9cad2dd39a8b54660001b6120fe565b610e35848481518110610e2657fe5b60200260200101518383611657565b846001850381518110610e4457fe5b6020026020010181815250505050808060019003915050610d23565b509392505050565b600080610e977f7029d57cb7a0bf2ab24056783b5bd55678c857d70e9ed496eeb4b92e7fa8c94060001b6120fe565b610ec37fba88c2ff8bc584c445a5305ec770547e2ca351c5a53066717cf340ed48f104e560001b6120fe565b610eef7f275908f8d4bd73f7d1fcccc035c04982d6e49ce34cbd2083da73527e3781526d60001b6120fe565b6000610efb85856110c5565b509050610f2a7fa89bc8fbed8bac6bdb0784b0385d73b4e57175ae34e54b6a36b1868d93d1a25160001b6120fe565b610f567f10afc90b45d6a25c09017b849460e2c014e99d7325e32ddc309ce23da3716ffa60001b6120fe565b600080610f64888888611420565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610fa957600080fd5b505afa158015610fbd573d6000803e3d6000fd5b505050506040513d6060811015610fd357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506110497f072290d16254a6fab93e4697084ffd14deaad14e54511def01ead4be9ff77ecc60001b6120fe565b6110757f6d8ee0530274342a11080b17d3486a67d19d0216d3f48ea17e123610c62fe42f60001b6120fe565b8273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146110af5780826110b2565b81815b8095508196505050505050935093915050565b6000806110f47f771d6e1d8f6d77b7e69f3422662c27a7001413e78faaa40092ac4c10eab5223360001b6120fe565b6111207f472c7052b519e7cfcafb39c141bfccf5ab2ed5f4dca88b9d2751b7550885a81460001b6120fe565b61114c7f490b4deae350eb208eb336f04f1092a491c117baffa44283f40e4c643908b8a660001b6120fe565b6111787f5a62dd007cb8723b050fb69dc51d2ac238bce84f2934aab07abc60e95ab4e06360001b6120fe565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806122c96025913960400191505060405180910390fd5b6112297fa25c471cb90719637f2865848853b3d7dbcd3b053f9acae07471cc32b2ecb58f60001b6120fe565b6112557ff8f8d2250dd014ca912794ab031371a2fb1884b96afa068b02ac8d3a353dee1e60001b6120fe565b6112817faa158f8e0393a55b0ee0320240ad2bd519c26bae4bcf687fbb80fefbbc82550660001b6120fe565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106112bb5782846112be565b83835b80925081935050506112f27f2bebbba93efc1ceb7aa293fd7408cd57e4ba30dccfffd348bd6d2248f8ee0b4860001b6120fe565b61131e7f9c09424e72aac11b626a3bd6bf45b8138c63341bd7d9610ac91e738d0e7d5fe860001b6120fe565b61134a7fe2558722d4ab8fff6ef6fe5b326dc390f7a628eca2f88e486b527c9918d5798860001b6120fe565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556e697377617056324c6962726172793a205a45524f5f41444452455353000081525060200191505060405180910390fd5b6114197f336ba41272f647be525502aeca69b925c1f1f8463bd4eaa4b0102b15bcd67c4060001b6120fe565b9250929050565b600061144e7f3786fa4570ba3180ba4ab936340f94ee66f894da97fee2c22ed44c09682fa09560001b6120fe565b61147a7fd2e4dafed7b5a717a2be9cffedd647d902bbca3cd4f400d8b1b44d4c9e88f03760001b6120fe565b6114a67f467934843556a4841d940bd14ec8414ecc9115e1d280bdf36e11dcd50348c8b860001b6120fe565b6000806114b385856110c5565b915091506114e37f2782d7ce2288128648b4404d66979fd22893f8c6aad87f7a3ab0a5f04e8e430e60001b6120fe565b61150f7fa7def638889b6f96a0a456528e1cd261b40a62b1ee0767f5745371971177195060001b6120fe565b858282604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012060405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001807fe699c2c70a1e9ca16c58b40782745b5d609738b755845b6ee18a18d21352f753815250602001925050506040516020818303038152906040528051906020012060001c925050509392505050565b60006116857f5cf0f561d31ec170edb8b5ac54320a8d81461f5b84d9d775a4e458764e9705f860001b6120fe565b6116b17f4962f1c374eee6b352e8e26341e7dec936dc609be89c10b2cac404276aa2597960001b6120fe565b6116dd7f3961c74c14c93bc056dbb6e3553b325874b96ce5bae1ecf5c54b7f5050851ef760001b6120fe565b6117097fa99dd87ba435b63f2306d0411cefecc12eaf890f7a1bdec1d0c43d04310a685260001b6120fe565b60008411611762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061229d602c913960400191505060405180910390fd5b61178e7fb09bd0f530bf57c5e830a22f9604629791ade4c6354464fef1e0d06f5c3ad01d60001b6120fe565b6117ba7fd45cc444f957804260adb4683b43004ac268b9b287feaa61bd0ff70d0012aa0660001b6120fe565b6117e67f9d2e83728582c664def2dc57621e8defe2b4a675c6e44c5ad9a96ebe73e19a1a60001b6120fe565b6118127ffcbbe54c15afb78da896b5d3964c319c4476346a06e4ce86e9c17a2fd4283f8e60001b6120fe565b6000831180156118225750600082115b611877576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806122ee6028913960400191505060405180910390fd5b6118a37fa690900369e8b726e330a2993878f9deb4c88dc34d0db0eaa787dac33f6aa04660001b6120fe565b6118cf7f2835be05f8a25f064642721fce773d6fb6456b28147efa3cd68ed1e04ce57d5a60001b6120fe565b6118fb7fd14989267b29a297a94e94f236c0b75b78a08f360097f19098f06eba442eeb3660001b6120fe565b60006119246103e8611916878761210190919063ffffffff16565b61210190919063ffffffff16565b90506119527f8ca8fc1f1c0565d2b38872e324e38c46e4ffe3dad084270d23e2be28249fe74160001b6120fe565b61197e7f7fc75bf38ab425890e56cb015ac82730743d04bd93224603e9c2bb82ed83ad9460001b6120fe565b60006119a76103e5611999888761221990919063ffffffff16565b61210190919063ffffffff16565b90506119d57f5dbf691e419ddcaebc4315ab3a2b401833a2000c0ea539fb438fdb6c5518cde060001b6120fe565b611a017f95be6e1420e2f96c8a289c287526f7c63b4079f6c1de0b744c8f2b5f8bcee5d560001b6120fe565b611a1e6001828481611a0f57fe5b0461219690919063ffffffff16565b925050509392505050565b6000611a577fc56ae62e6cbf74e88bae23e569c29485631de0a1d8879e97dfc825e5816a209e60001b6120fe565b611a837f320a93493e7db6b5616291d5659b22649b87eebda21e9f36e7c2a84a8ce3aec860001b6120fe565b611aaf7fea3273080eadc96998579bf38193d2a0fb1cfa971d7fe9f925565558b2f8560660001b6120fe565b611adb7f68ef0b1f5a877355b893dc6a3cd78489724cfbd6005c0ae20d8154b704c9978c60001b6120fe565b60008411611b34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806123166025913960400191505060405180910390fd5b611b607f8103dd9de585c4f431ea5456c7cce43bb2ce1c3be3620522af9eb330e50ae24960001b6120fe565b611b8c7f592a346aa9130672248014720ae3da75570419dd20d64cf9bfa54e149168a72460001b6120fe565b611bb87f10be0c513ba4beac335711fe044b6fbf58c7e25e9de0e72a2301dec7806bea3860001b6120fe565b611be47f7bbbdd671d94707af5dabafbb9f233b54a8177134c6cbfd19c453570686ba3ab60001b6120fe565b600083118015611bf45750600082115b611c49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806122ee6028913960400191505060405180910390fd5b611c757fc3e1eb25aaa5d3150e1d1ef1d848a538880261b054331c19ed2d2120af47932360001b6120fe565b611ca17fb6928645511041d2c44c0af08dde3152b29c0e5e5bf58597a0c000286549a74660001b6120fe565b611ccd7f12904c84bb1061da6560eb3bbe6f37938b9024e007fcae7c579472c53ce5616c60001b6120fe565b82611ce1838661210190919063ffffffff16565b81611ce857fe5b0490509392505050565b6060611d207f78d3abca8f310b89e4888b0a4aba436371e6d2842339ba3fb64dc6d105e2b5a260001b6120fe565b611d4c7f69ea84cb11bcf99ed932b2af6da5209ce7edaa79d139f6913059e55d72d1d6a760001b6120fe565b611d787f5bea10356759d9c94eb1c3ecef8b4b86ac515056d1dfce3fd311ee8fc2f498db60001b6120fe565b611da47f56a9e8b1bf7cd113931cfb55ab527ea7724940ec3488699bd37077ccd064b14760001b6120fe565b600282511015611e1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556e697377617056324c6962726172793a20494e56414c49445f50415448000081525060200191505060405180910390fd5b611e487fd8358600650dc59e5da22b23e7068278485586dbb5675e6665535078057b567860001b6120fe565b611e747f64706d9060b0188c2455819ac836a02a36a52e2bbf9632a2c3b7e31529d508f260001b6120fe565b611ea07fae984dcba5ed534324639bfb75582883af999ad09c8f3ed63afbc54ca5b853fa60001b6120fe565b815167ffffffffffffffff81118015611eb857600080fd5b50604051908082528060200260200182016040528015611ee75781602001602082028036833780820191505090505b509050611f167fe5d1c00f5812658c6efca90b273a65ea92bda190b8a8fe974d5a92b7b66daa9c60001b6120fe565b611f427ffc9871c9131873b9bc8401e953cd8d4c1fd8bc855247526f8689a74ab71976cc60001b6120fe565b8281600081518110611f5057fe5b602002602001018181525050611f887fb2473d51044a341de273283827791dfecf68f512734cd9c3f668df0f2c2e70b460001b6120fe565b611fb47f5fb41e35e576233609b4406d7f57b8a73e03687cee6e96e328c5192b9c75248560001b6120fe565b60005b60018351038110156120f657611fef7f69134181fe5357c2bda7d9460ea7965b1d3a17671ca5e382c100947a040bd00860001b6120fe565b61201b7f3d8dbc8cd4534bd3e7b74a2639ea9147c33910463a488dd1cba84f6c097809ef60001b6120fe565b6000806120528786858151811061202e57fe5b602002602001015187600187018151811061204557fe5b6020026020010151610e68565b915091506120827f8d3299d3ac2a4c8fa4b6a60a0ceb27605fc59295c46bb232366be814a59c17cc60001b6120fe565b6120ae7f265e9dd998a6d47ae6909add11b9690bc7a1240132661bca1f41686e02c7be5c60001b6120fe565b6120cc8484815181106120bd57fe5b60200260200101518383610637565b8460018501815181106120db57fe5b60200260200101818152505050508080600101915050611fb7565b509392505050565b50565b60008082148061211e575082828385029250828161211b57fe5b04145b612190576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6d756c2d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b6000828284019150811015612213576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b6000828284039150811115612296576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b9291505056fe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459556e697377617056324c6962726172793a20494e53554646494349454e545f414d4f554e54556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a2646970667358221220e3465662009620623047bd0a05348cb39add12906a963d830502b284eab0d8b864736f6c63430006060033";

type UniswapV2LibraryMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: UniswapV2LibraryMockConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class UniswapV2LibraryMock__factory extends ContractFactory {
  constructor(...args: UniswapV2LibraryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<UniswapV2LibraryMock> {
    return super.deploy(overrides || {}) as Promise<UniswapV2LibraryMock>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniswapV2LibraryMock {
    return super.attach(address) as UniswapV2LibraryMock;
  }
  override connect(signer: Signer): UniswapV2LibraryMock__factory {
    return super.connect(signer) as UniswapV2LibraryMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2LibraryMockInterface {
    return new utils.Interface(_abi) as UniswapV2LibraryMockInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): UniswapV2LibraryMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2LibraryMock;
  }
}
